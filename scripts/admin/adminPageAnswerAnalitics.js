import * as impHttp from "../http/api-router.js";
// Ensure analytics is generated for each test separately
document.querySelector('.analizeTests').addEventListener("click", () => {
    generateTestAnalytics();
});
async function generateTestAnalytics() {
  const testAnalyticsContainer = document.querySelector(".test-analytics");
  if (!testAnalyticsContainer) {
    return alert("–ü–æ–º–∏–ª–∫–∞! –ë–ª–æ–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const usersAnswersResponse = await impHttp.getAllUserAnswers();
  if (usersAnswersResponse.status !== 200) {
    return alert(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${usersAnswersResponse.data.message}`);
  }
  const usersAnswers = usersAnswersResponse.data;

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏
  const testsResponse = await impHttp.getAllTestsFromDB();
  if (testsResponse.status !== 200) {
    return alert(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: ${testsResponse.data.message}`);
  }
  const testsInfo = testsResponse.data;
  
  //console.log(testsInfo);

// –ì—Ä—É–ø—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ç–µ—Å—Ç–∞–º–∏
const groupedByTest = usersAnswers.reduce((acc, userAnswer) => {
    const test = testsInfo.find((t) => t.testId === userAnswer.testId);
    if (!test) return acc;

    if (!acc[test.testId]) {
        acc[test.testId] = {
            testId: test.testId,
            testName: test.subjectName + " " + test.name.split(' ')[2],
            questions: JSON.parse(test.questions),
            answers: [],
        };
    }

    acc[test.testId].answers.push(JSON.parse(userAnswer.answersArray));
    return acc;
}, {});

// –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
const testAnalyticsData = Object.entries(groupedByTest).map(([testId, testData]) => {
    const questionStats = {};

    //console.log(testData);

    testData.answers.forEach((answersArray) => {
        answersArray.forEach((item) => {
            const questionId = item.question;
            const correctAnswers = testData.questions[questionId]?.correctAnswers || [];

            if (!questionStats[questionId]) {
                questionStats[questionId] = { total: 0, wrong: 0 };
            }

            questionStats[questionId].total += 1;

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞
            const isWrong = item.answer.some((ans, index) => ans !== correctAnswers[index]);
            if (isWrong) {
                questionStats[questionId].wrong += 1;
            }
        });
    });

    //console.log(testsInfo);

    return {
        testName: testData.testName,
        questions: testData.questions,
        questionStats,
        testId        
    };
});

// –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
testAnalyticsContainer.innerHTML = "";
//console.log(testAnalyticsData);
// –°–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–µ—Å—Ç—É –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
testAnalyticsData.sort((a, b) => a.testName.localeCompare(b.testName, 'uk'));

// –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
testAnalyticsData.forEach((test) => {
    console.log(test);
    const testSection = document.createElement("div");
    testSection.classList.add("test-section");

    const testTitle = document.createElement("h3");
    
    testTitle.innerHTML = ` <a href = "https://docs.google.com/document/d/${test.testId}" target='_blank'>üëÅ </a>${test.testName}`;
    testSection.appendChild(testTitle);

    
    const table = document.createElement("table");
    // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–∫–æ—Ä–¥–µ–æ–Ω—É
    testTitle.addEventListener("click", () => {
        const isVisible = table.style.display === "block";
        table.style.display = isVisible ? "none" : "block";
    });

    // –ü–æ—á–∞—Ç–∫–æ–≤–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    table.style.display = "none";
    table.classList.add("analytics-table");

    table.innerHTML = `
        <thead>
            <tr>
                <th>–ù–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è</th>
                <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</th>
                <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π</th>
                <th>–ó–∞—Å–≤–æ—î–Ω–æ</th>
                <th>–ü–∏—Ç–∞–Ω–Ω—è</th>
                <th>–í—ñ–¥–ø–æ–≤—ñ–¥—å</th>
            </tr>
        </thead>
        <tbody>
            ${Object.entries(test.questionStats)
                .map(
                    ([questionId, stats]) => `
                <tr>
                    <td>${parseInt(questionId) + 1}</td>
                    <td>${stats.total}</td>
                    <td>${stats.wrong}</td>
                    <td>${Math.floor(100-stats.wrong/stats.total*100)}%</td>
                    <td >
                        <div class="toggle-question" style="cursor: pointer;">üëÅ</div>
                        <div class="question-body" style="display: none;">${test.questions[parseInt(questionId)].body}</div>
                    </td>
                    <td>
                        <div class="toggle-question" style="cursor: pointer;">üëÅ</div>
                        <div class="question-body" style="display: none;">${test.questions[parseInt(questionId)].correctAnswers}</div>
                    </td>
                </tr>
            `
                )
                .join("")}
        </tbody>
    `;

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
    table.querySelectorAll(".toggle-question").forEach((toggle, index) => {
        toggle.addEventListener("click", () => {
            const questionBody = toggle.nextElementSibling;
            questionBody.style.display = questionBody.style.display === "none" ? "block" : "none";
        });
    });

    testSection.appendChild(table);
    testAnalyticsContainer.appendChild(testSection);
});
  

}

document.querySelector('.analizeTests').addEventListener("click", () => {
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  generateTestAnalytics();
});
