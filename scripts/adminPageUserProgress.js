import * as impPopups from "./components/popups.js";
import * as importConfig from "./dev/config.js";
import * as impHttp from "./http/api-router.js";
import * as impSubject200 from "./convert200.js";

adminLogin();

async function adminLogin() {
  let loginForm = document.querySelector(".admin-page__login");
  if (!loginForm) return;
  let authResponse = await impHttp.isAuth();
  if (authResponse.status == 200) {
    if (window?.userInfo?.roles?.includes("ADMIN")) {
      loginForm.remove();
      adminPage();
    } else {
      location.href = importConfig.client_url;
      alert("–í –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    }

  } else {
    let button = loginForm.querySelector(".admin-page__login-submit");
    button.addEventListener("click", async function (e) {
      e.preventDefault();
      let email = document.querySelector(".admin-page-email").value;
      let password = document.querySelector(".admin-page-password").value;
      let loginResponse = await impHttp.login(email, password);
      if (loginResponse.status == 200) {
        loginForm.remove();
        adminPage();
      }
    });
  }
}

const fillTestBlocks = (userBlock, tests, correctTests = []) => {
  const testBlocks = userBlock.querySelectorAll(
    ".admin-page__user-current-test-progress"
  );
  testBlocks.forEach((testBlock) => {
    const testId = testBlock.getAttribute("test");
    const testData = tests.find((test) => test.testId == testId);
    //console.log(testData);
    testData.answers.forEach((answer, index) => {
      let correctAnswerArr = correctTests[index];

      let isAnswerCorrect = answer.answer.every((item, index) => {
        return item == correctAnswerArr[index];
      });

      testBlock.innerHTML += `
        <div class="admin-page__user-current-test-progress-item ${answer.submitted ? "passed" : ""
        } ${!isAnswerCorrect && answer.submitted ? "answer_wrong-with-bg" : ""
        }">${answer.question + 1}</div>
      `;
    });
  });
};

const appendUser = async (name, tests, testsArray, user) => {
  const users = document.querySelector(".admin-page__users");
  let userBlock = document.createElement("div");
  userBlock.classList.add("admin-page__users-user");
  userBlock.innerHTML =
    `
  <div class="admin-page__users-info">
    <div class="result-item__name_block">
      <input type='checkbox' class='delete-check-box test-check-box' >
      <h2 class="result-item__name admin-page__name_collapse">${name}</h2>
    </div>
    
    <div>    
    <button class="test-footer__button result-item__info_block"></button>   
    <button class="test-footer__button admin-page__delete result-item__name_btn_remove ">–í–∏–¥–∞–ª–∏—Ç–∏</button>
    </div>
  </div>
  `;

  tests.sort((a, b) => {
    return a.name.localeCompare(b.name, 'uk');
  });

  for (const test of tests) {
    let testBlock = document.createElement("div");
    testBlock.classList.add("admin-page__users-test");
    testBlock.innerHTML = `
      <h3>${test.name}<span class="admin-page__user-current-test-progress-precentage"></span></h3>    
      <div class="admin-page__user-current-test-progress" test="${test.testId}"></div>        
    `;
    let correctTests = await getCorrectAnswer(test, testsArray);
    fillTestBlocks(testBlock, tests, correctTests);
    userBlock.appendChild(testBlock);
  }

  //–∑–≥–æ—Ä–Ω—É—Ç–∏/—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  let collapseButton = userBlock.querySelector(".admin-page__name_collapse")
  //let collapseButton = userBlock.querySelector(".result-item__name")

  //console.log(collapseButton);
  //–¥–æ–¥–∞—Ç–∏ –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
  collapseButton.addEventListener("click", function () {
    let userBlock = this.closest(".admin-page__users-user");
    if (!userBlock) return;

    let testBlocks = userBlock.querySelectorAll(".admin-page__users-test");
    testBlocks.forEach(testBlock => testBlock.classList.toggle("collapsed"));

    let info = userBlock.querySelector(".result-item__info_block");
    if (!info) return;
    
    info.innerHTML = ""; // –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –æ—á–∏—â–∞—Ç–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

    let spanResult = userBlock.querySelectorAll(".result-span");
    spanResult.forEach(span => {
        info.prepend(span.cloneNode(true)); // –ö–ª–æ–Ω—É—î–º–æ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    });
});


  //–ë–ª–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  
  let removeButton = userBlock.querySelector(".result-item__name_btn_remove");
  removeButton.addEventListener("click", async () => {
    let main = document.querySelector("main");
    let popupText = `
        –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <h2> ${name}?</h2>
        `;
    let popupObj = impPopups.yesNoPopup(popupText);
    main.appendChild(popupObj.popup);
    let yesButton = popupObj.yesButton;
    yesButton.addEventListener("click", async function (e) {
      e.preventDefault();
      popupObj.popup.remove();
      let response = await impHttp.removeCurrentPassingUserByEmail(user.email);
      if (response.status == 200) {
        //alert("–í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! üòé");
        userBlock.remove();
      } else {
        alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!");
      }
    });
    let noButton = popupObj.noButton;
    noButton.addEventListener("click", async function (e) {
      e.preventDefault();
      popupObj.popup.remove();
    });
  });
  users.appendChild(userBlock);
};

const removeOldUsers = () => {
  const users = document.querySelector(".admin-page__users");
  users.innerHTML = "";
};

const initRefreshButton = () => {
  const refreshButton = document.querySelector(".admin-page__refresh-button");
  refreshButton.addEventListener("click", () => adminPage());
};

const appendData = async () => {
  const { data: currentPassingUsers } =
    await impHttp.getAllCurrentPassingUsers();

  // —à–æ—Å—å –ø—Ä–∞—Ü—é—î –∞ —è–∫ —Ü–µ –Ω–µ –≤–∞–∂–ª–∏–≤–æ
  let testIsd = Array.from(
    new Set(
      currentPassingUsers
        .map((item) => {
          return item.tests.map((item) => {
            return item.testId;
          });
        })
        .flat()
    )
  );

  let correctTests = await getTestsInformation(testIsd);

  removeOldUsers();

  currentPassingUsers.sort((a, b) => {
    return a.name.localeCompare(b.name, 'uk');
  });

  currentPassingUsers.map(async (user) => {
    await appendUser(user.name, user.tests, correctTests, user);
  });

  if (currentPassingUsers.length == 0) {
    const users = document.querySelector(".admin-page__users");
    users.innerHTML = "<h4>–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å —Ç–µ—Å—Ç–∏</h4>";
  }
};

const adminPage = async () => {
  await appendData();
  initTimer();
  countH2()
};

let timer = 30
// –≤ admin-page__timer-button –¥–æ–¥–∞—Ç–∏ —Ç–∞–π–º–µ—Ä —â–æ –≤—ñ–¥—Ä–∞—Ö–æ–≤—É—î —á–∞—Å –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
const initTimer = () => {
  let timerButton = document.querySelector(".admin-page__timer-button");
  if (!timerButton) return;
  timerButton.textContent = timer;
  setInterval(() => {
    timerButton.textContent = timer;
    timer--;
    if (timer == 0) {
      timer = 30;
    }
  }, 1000);
};

const initRefreshing = () => {
  setInterval(() => {
    adminPage();      
    //–ø–∞—É–∑–∞ –Ω–∞ 2 —Å–µ–∫ —ñ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    setTimeout(() => {
      let collapseButton = document.querySelectorAll(".admin-page__name_collapse");
      if (!collapseButton) return;
      collapseUsers()
    }, 2000);
  }, timer * 1000);
};

initRefreshButton();
initRefreshing();

//–∫–æ–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å h2 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function countH2() {
  let h2 = document.querySelectorAll("h2");
  //console.log(h2.length);
  document.getElementsByClassName("admin-page__count-button")[0].textContent = h2.length
  return h2.length;
}

//–ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–∞–ª–∏—Ç–∏" –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function getTestsInformation(arr) {
  let testsInfoResponse = await impHttp.getAllTestsFromDB(arr);
  if (testsInfoResponse.status != 200) {
    return alert("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö" + testsInfoResponse.data.message);
  }
  return testsInfoResponse.data;
}

async function getCorrectAnswer(test, testsInfo) {
  let currentTest = testsInfo?.filter((obj) => obj.testId === test.testId);
  let currentTestBody = JSON.parse(currentTest[0].questions);

  if (!currentTestBody) {
    alert("error line 130");
  }

  let corectAnswers = currentTestBody.map((item) => {
    return item.correctAnswers;
  });

  return corectAnswers;
}


//–æ–±—Ä–∞—Ç–∏ –≤—Å—ñ —á–µ–∫–±–æ–∫—Å–∏ .delete-check-box –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ 
const selectAllButton = document.querySelector('.selectAll');
if (selectAllButton) {
  selectAllButton.addEventListener('click', function () {
    const checkboxes = document.querySelectorAll('.delete-check-box');
    checkboxes.forEach(function (checkbox) {
      checkbox.checked = true;
    });
  });
}

// delete button
const deleteSelectedUsersButton = document.querySelector('.delete-current-passing-users');

// Add event listener to the delete button
deleteSelectedUsersButton.addEventListener('click', function () {

  const selectedUsers = []
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω –≤—Å—ñ—Ö –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const selectedItems = document.querySelectorAll('.delete-check-box:checked');
  selectedItems.forEach(function (checkbox) {
    const resultItem = checkbox.closest('.admin-page__users-user');
    if (resultItem) {
      selectedUsers.push(resultItem.querySelector('h2').innerText)
    }
  });

  //–í–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –º–∞—Å–∏–≤—É selectedUsers –∫–æ–∂–µ–Ω –∑–∞ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º
  let userList = selectedUsers.map(user => `<div style = "float:left">${user}</div>`).join('');

  let popupText = `
      <h2>–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤?</h2>
      <h3 style = "height:300px; overflow:auto">${userList}</h3>
      `;

  let popupObj = impPopups.yesNoPopup(popupText);

  let main = document.querySelector("main");
  main.appendChild(popupObj.popup);
  let yesButton = popupObj.yesButton;
  yesButton.addEventListener("click", async function (e) {
    e.preventDefault();
    popupObj.popup.remove();

    selectedItems.forEach(function (checkbox) {
      const resultItem = checkbox.closest('.admin-page__users-user');
      if (resultItem) {
        // Trigger the delete action for the selected result item
        resultItem.querySelector('.result-item__name_btn_remove').click();

        // Wait for the "Yes" button to appear, and then click it
        setTimeout(function () {
          const yesButton = document.querySelector('button.buttons__button-yes');
          if (yesButton) {
            yesButton.click();
          }
        }, 1000); // Adjust the timeout if necessary to match the UI behavior
      }
    });

  });
  let noButton = popupObj.noButton;
  noButton.addEventListener("click", async function (e) {
    e.preventDefault();
    popupObj.popup.remove();
  });


});

//
//–∫–Ω–æ–ø–∫–∞ –∑–≥–æ—Ä–Ω—É—Ç–∏/—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const collapseAllButton = document.querySelector('.admin-page__collapse-all-button');

if (collapseAllButton) {
  collapseAllButton.addEventListener('click', function () {
    //–ó–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ø–∏—Å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É –ó–≥–æ—Ä–Ω—É—Ç–∏/–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏
    let text = this.textContent;
    this.textContent = text === "–ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ—Ö" ? "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ—Ö" : "–ó–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ—Ö";
    collapseUsers();
  });
}

//–∑–≥–æ—Ä–Ω—É—Ç–∏/—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function collapseUsers() {
  let collapseButton = document.querySelectorAll(".admin-page__name_collapse");
  if (!collapseButton) return;
  collapseButton.forEach(button => {
    button.click();
  });
}

